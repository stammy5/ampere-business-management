generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/ampere_business_management/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AuditLog {
  id         String     @id
  action     String
  entityType EntityType
  entityId   String
  oldValues  Json?
  newValues  Json?
  userId     String
  userEmail  String
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime   @default(now())
  User       User       @relation(fields: [userId], references: [id])
}

model Client {
  id                String          @id
  name              String
  email             String?
  phone             String?
  address           String?
  city              String?
  state             String?
  country           String          @default("Singapore")
  postalCode        String?
  contactPerson     String?
  companyReg        String?
  website           String?
  notes             String?
  clientType        ClientType      @default(ENTERPRISE)
  bankName          String?
  bankAccountNumber String?
  bankAccountName   String?
  bankSwiftCode     String?
  bankAddress       String?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  createdById       String
  clientNumber      String?         @unique
  xeroContactId     String?         @unique
  isXeroSynced      Boolean         @default(false)
  lastXeroSync      DateTime?
  User              User            @relation(fields: [createdById], references: [id])
  ClientInvoice     ClientInvoice[]
  LegacyInvoice     LegacyInvoice[]
  Project           Project[]
  Quotation         Quotation[]
  Task              Task[]
  Tender            Tender[]
  ServiceContract   ServiceContract[]
  ServiceJob        ServiceJob[]
}

model ClientInvoice {
  id                String              @id
  invoiceNumber     String              @unique
  projectId         String?
  quotationId       String?
  clientId          String
  subtotal          Decimal             @db.Decimal(15, 2)
  taxAmount         Decimal?            @db.Decimal(15, 2)
  discountAmount    Decimal?            @db.Decimal(15, 2)
  totalAmount       Decimal             @db.Decimal(15, 2)
  currency          String              @default("SGD")
  status            ClientInvoiceStatus @default(DRAFT)
  issueDate         DateTime
  dueDate           DateTime
  paidDate          DateTime?
  description       String?
  terms             String?
  notes             String?
  xeroInvoiceId     String?
  isXeroSynced      Boolean             @default(false)
  lastXeroSync      DateTime?
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  Client            Client              @relation(fields: [clientId], references: [id])
  User              User                @relation(fields: [createdById], references: [id])
  Project           Project?            @relation(fields: [projectId], references: [id])
  Quotation         Quotation?          @relation(fields: [quotationId], references: [id])
  ClientInvoiceItem ClientInvoiceItem[]
  Document          Document[]
  Payment           Payment[]
}

model ClientInvoiceItem {
  id              String        @id
  clientInvoiceId String
  description     String
  category        ItemCategory  @default(SERVICES)
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @db.Decimal(15, 2)
  discount        Decimal?      @db.Decimal(5, 2)
  taxRate         Decimal?      @db.Decimal(5, 2)
  subtotal        Decimal       @db.Decimal(15, 2)
  discountAmount  Decimal?      @db.Decimal(15, 2)
  taxAmount       Decimal?      @db.Decimal(15, 2)
  totalPrice      Decimal       @db.Decimal(15, 2)
  unit            String?       @default("pcs")
  notes           String?
  order           Int           @default(0)
  ClientInvoice   ClientInvoice @relation(fields: [clientInvoiceId], references: [id], onDelete: Cascade)
}

model Document {
  id               String           @id
  filename         String
  originalName     String
  mimetype         String
  size             Int
  cloudStoragePath String
  description      String?
  category         DocumentCategory @default(GENERAL)
  projectId        String?
  vendorId         String?
  tenderId         String?
  quotationId      String?
  clientInvoiceId  String?
  vendorInvoiceId  String?
  purchaseOrderId  String?
  uploadedById     String?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  ClientInvoice    ClientInvoice?   @relation(fields: [clientInvoiceId], references: [id])
  Project          Project?         @relation(fields: [projectId], references: [id])
  PurchaseOrder    PurchaseOrder?   @relation(fields: [purchaseOrderId], references: [id])
  Quotation        Quotation?       @relation(fields: [quotationId], references: [id])
  Tender           Tender?          @relation(fields: [tenderId], references: [id])
  User             User?            @relation(fields: [uploadedById], references: [id])
  Vendor           Vendor?          @relation(fields: [vendorId], references: [id])
  VendorInvoice    VendorInvoice?   @relation(fields: [vendorInvoiceId], references: [id])
}

model LegacyInvoice {
  id            String        @id
  invoiceNumber String        @unique
  projectId     String
  clientId      String
  amount        Decimal       @db.Decimal(15, 2)
  taxAmount     Decimal?      @db.Decimal(15, 2)
  totalAmount   Decimal       @db.Decimal(15, 2)
  status        InvoiceStatus @default(DRAFT)
  issueDate     DateTime
  dueDate       DateTime
  description   String?
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Client        Client        @relation(fields: [clientId], references: [id])
  User          User          @relation(fields: [createdById], references: [id])
  Project       Project       @relation(fields: [projectId], references: [id])
}

model Payment {
  id                               String         @id
  paymentNumber                    String         @unique
  clientInvoiceId                  String?
  vendorInvoiceId                  String?
  amount                           Decimal        @db.Decimal(15, 2)
  currency                         String         @default("SGD")
  paymentMethod                    PaymentMethod  @default(BANK_TRANSFER)
  paymentDate                      DateTime
  reference                        String?
  notes                            String?
  status                           PaymentStatus  @default(PENDING)
  xeroPaymentId                    String?
  isXeroSynced                     Boolean        @default(false)
  lastXeroSync                     DateTime?
  processedById                    String?
  createdById                      String
  createdAt                        DateTime       @default(now())
  updatedAt                        DateTime
  ClientInvoice                    ClientInvoice? @relation(fields: [clientInvoiceId], references: [id])
  User_Payment_createdByIdToUser   User           @relation("Payment_createdByIdToUser", fields: [createdById], references: [id])
  User_Payment_processedByIdToUser User?          @relation("Payment_processedByIdToUser", fields: [processedById], references: [id])
  VendorInvoice                    VendorInvoice? @relation(fields: [vendorInvoiceId], references: [id])
}

model Project {
  id                               String           @id
  projectNumber                    String           @unique
  name                             String
  description                      String?
  projectType                      ProjectType      @default(REGULAR)
  status                           ProjectStatus    @default(PLANNING)
  priority                         Priority         @default(MEDIUM)
  startDate                        DateTime?
  endDate                          DateTime?
  estimatedBudget                  Decimal?         @db.Decimal(15, 2)
  actualCost                       Decimal?         @db.Decimal(15, 2)
  progress                         Int              @default(0)
  clientId                         String
  managerId                        String?
  salespersonId                    String?
  createdById                      String
  isActive                         Boolean          @default(true)
  createdAt                        DateTime         @default(now())
  updatedAt                        DateTime
  ClientInvoice                    ClientInvoice[]
  Document                         Document[]
  LegacyInvoice                    LegacyInvoice[]
  Client                           Client           @relation(fields: [clientId], references: [id])
  User_Project_createdByIdToUser   User             @relation("Project_createdByIdToUser", fields: [createdById], references: [id])
  User_Project_managerIdToUser     User?            @relation("Project_managerIdToUser", fields: [managerId], references: [id])
  User_Project_salespersonIdToUser User?            @relation("Project_salespersonIdToUser", fields: [salespersonId], references: [id])
  ProjectVendor                    ProjectVendor[]
  PurchaseOrder                    PurchaseOrder[]
  Quotation                        Quotation[]
  Task                             Task[]
  VendorContract                   VendorContract[]
  VendorInvoice                    VendorInvoice[]
  ServiceContract                  ServiceContract[]
  ServiceJob                       ServiceJob[]
  ProjectDocuments                 ProjectDocument[]
}

model ProjectVendor {
  id            String              @id
  projectId     String
  vendorId      String
  role          String
  startDate     DateTime?
  endDate       DateTime?
  contractValue Decimal?            @db.Decimal(15, 2)
  status        VendorProjectStatus @default(ASSIGNED)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime
  Project       Project             @relation(fields: [projectId], references: [id])
  Vendor        Vendor              @relation(fields: [vendorId], references: [id])

  @@unique([projectId, vendorId])
}

model PurchaseOrder {
  id                                    String                  @id
  poNumber                              String                  @unique
  vendorId                              String
  projectId                             String?
  requesterId                           String
  subtotal                              Decimal                 @db.Decimal(15, 2)
  taxAmount                             Decimal?                @db.Decimal(15, 2)
  totalAmount                           Decimal                 @db.Decimal(15, 2)
  currency                              String                  @default("SGD")
  status                                PurchaseOrderStatus     @default(DRAFT)
  issueDate                             DateTime?
  deliveryDate                          DateTime?
  terms                                 String?
  notes                                 String?
  xeroOrderId                           String?
  isXeroSynced                          Boolean                 @default(false)
  lastXeroSync                          DateTime?
  approvedById                          String?
  approvedAt                            DateTime?
  createdById                           String
  createdAt                             DateTime                @default(now())
  updatedAt                             DateTime
  Document                              Document[]
  User_PurchaseOrder_approvedByIdToUser User?                   @relation("PurchaseOrder_approvedByIdToUser", fields: [approvedById], references: [id])
  User_PurchaseOrder_createdByIdToUser  User                    @relation("PurchaseOrder_createdByIdToUser", fields: [createdById], references: [id])
  Project                               Project?                @relation(fields: [projectId], references: [id])
  User_PurchaseOrder_requesterIdToUser  User                    @relation("PurchaseOrder_requesterIdToUser", fields: [requesterId], references: [id])
  Vendor                                Vendor                  @relation(fields: [vendorId], references: [id])
  PurchaseOrderActivity                 PurchaseOrderActivity[]
  PurchaseOrderItem                     PurchaseOrderItem[]
  VendorInvoice                         VendorInvoice[]
}

model PurchaseOrderActivity {
  id              String        @id
  purchaseOrderId String
  action          String
  description     String?
  oldValue        String?
  newValue        String?
  userId          String
  userEmail       String
  createdAt       DateTime      @default(now())
  PurchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model PurchaseOrderItem {
  id              String        @id
  purchaseOrderId String
  description     String
  category        ItemCategory  @default(MATERIALS)
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @db.Decimal(15, 2)
  discount        Decimal?      @db.Decimal(5, 2)
  taxRate         Decimal?      @db.Decimal(5, 2)
  subtotal        Decimal       @db.Decimal(15, 2)
  discountAmount  Decimal?      @db.Decimal(15, 2)
  taxAmount       Decimal?      @db.Decimal(15, 2)
  totalPrice      Decimal       @db.Decimal(15, 2)
  unit            String?       @default("pcs")
  notes           String?
  order           Int           @default(0)
  PurchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model Quotation {
  id                                 String              @id
  quotationNumber                    String
  version                            Int                 @default(1)
  title                              String
  description                        String?
  clientReference                    String?
  tenderId                           String?
  clientId                           String
  projectId                          String?
  salespersonId                      String?
  subtotal                           Decimal             @db.Decimal(15, 2)
  taxAmount                          Decimal?            @db.Decimal(15, 2)
  discountAmount                     Decimal?            @db.Decimal(15, 2)
  totalAmount                        Decimal             @db.Decimal(15, 2)
  currency                           String              @default("SGD")
  status                             QuotationStatus     @default(DRAFT)
  validUntil                         DateTime
  terms                              String?
  notes                              String?
  templateType                       String              @default("standard")
  isSuperseded                       Boolean             @default(false)
  parentQuotationId                  String?
  approvalValue                      Decimal?            @db.Decimal(15, 2)
  requiresApproval                   Boolean             @default(false)
  createdById                        String
  approvedById                       String?
  approvedAt                         DateTime?
  rejectedById                       String?
  rejectedAt                         DateTime?
  rejectionReason                    String?
  createdAt                          DateTime            @default(now())
  updatedAt                          DateTime
  ClientInvoice                      ClientInvoice[]
  Document                           Document[]
  User_Quotation_approvedByIdToUser  User?               @relation("Quotation_approvedByIdToUser", fields: [approvedById], references: [id])
  Client                             Client              @relation(fields: [clientId], references: [id])
  User_Quotation_createdByIdToUser   User                @relation("Quotation_createdByIdToUser", fields: [createdById], references: [id])
  Quotation                          Quotation?          @relation("QuotationToQuotation", fields: [parentQuotationId], references: [id])
  other_Quotation                    Quotation[]         @relation("QuotationToQuotation")
  Project                            Project?            @relation(fields: [projectId], references: [id])
  User_Quotation_rejectedByIdToUser  User?               @relation("Quotation_rejectedByIdToUser", fields: [rejectedById], references: [id])
  User_Quotation_salespersonIdToUser User?               @relation("Quotation_salespersonIdToUser", fields: [salespersonId], references: [id])
  Tender                             Tender?             @relation(fields: [tenderId], references: [id])
  QuotationActivity                  QuotationActivity[]
  QuotationApproval                  QuotationApproval[]
  QuotationItem                      QuotationItem[]

  @@unique([quotationNumber, version])
}

model QuotationActivity {
  id          String    @id
  quotationId String
  action      String
  description String?
  oldValue    String?
  newValue    String?
  userId      String
  userEmail   String
  createdAt   DateTime  @default(now())
  Quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model QuotationApproval {
  id            String         @id
  quotationId   String
  approverId    String
  status        ApprovalStatus @default(PENDING)
  comments      String?
  approvalLevel Int            @default(1)
  approvedAt    DateTime?
  createdAt     DateTime       @default(now())
  User          User           @relation(fields: [approverId], references: [id])
  Quotation     Quotation      @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model QuotationItem {
  id             String       @id
  quotationId    String
  description    String
  category       ItemCategory @default(MATERIALS)
  quantity       Decimal      @db.Decimal(10, 2)
  unitPrice      Decimal      @db.Decimal(15, 2)
  discount       Decimal?     @db.Decimal(5, 2)
  taxRate        Decimal?     @db.Decimal(5, 2)
  subtotal       Decimal      @db.Decimal(15, 2)
  discountAmount Decimal?     @db.Decimal(15, 2)
  taxAmount      Decimal?     @db.Decimal(15, 2)
  totalPrice     Decimal      @db.Decimal(15, 2)
  unit           String?      @default("pcs")
  notes          String?
  order          Int          @default(0)
  Quotation      Quotation    @relation(fields: [quotationId], references: [id], onDelete: Cascade)
}

model QuotationItemLibrary {
  id               String       @id
  description      String
  category         ItemCategory @default(MATERIALS)
  unit             String       @default("pcs")
  averageUnitPrice Decimal      @db.Decimal(15, 2)
  lastUnitPrice    Decimal      @db.Decimal(15, 2)
  usageCount       Int          @default(0)
  createdById      String
  lastUsedAt       DateTime     @default(now())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  User             User         @relation(fields: [createdById], references: [id])

  @@unique([description, category, unit])
}

model QuotationTemplate {
  id              String   @id
  name            String
  templateType    String
  description     String?
  headerContent   String?
  footerContent   String?
  termsConditions String?
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false)
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  User            User     @relation(fields: [createdById], references: [id])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id                         String             @id
  title                      String
  description                String?
  priority                   TaskPriority       @default(MEDIUM)
  status                     TaskStatus         @default(TODO)
  dueDate                    DateTime?
  completedAt                DateTime?
  assignerId                 String
  assigneeId                 String
  projectId                  String?
  clientId                   String?
  isArchived                 Boolean            @default(false)
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime
  User_Task_assigneeIdToUser User               @relation("Task_assigneeIdToUser", fields: [assigneeId], references: [id])
  User_Task_assignerIdToUser User               @relation("Task_assignerIdToUser", fields: [assignerId], references: [id])
  Client                     Client?            @relation(fields: [clientId], references: [id])
  Project                    Project?           @relation(fields: [projectId], references: [id])
  TaskAttachment             TaskAttachment[]
  TaskComment                TaskComment[]
  TaskNotification           TaskNotification[]
}

model TaskAttachment {
  id               String   @id
  taskId           String
  filename         String
  originalName     String
  mimetype         String
  size             Int
  cloudStoragePath String
  uploadedById     String
  createdAt        DateTime @default(now())
  Task             Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User             User     @relation(fields: [uploadedById], references: [id])
}

model TaskComment {
  id         String   @id
  taskId     String
  userId     String
  comment    String
  isInternal Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id])
}

model TaskNotification {
  id        String           @id
  taskId    String
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())
  Task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User      User             @relation(fields: [userId], references: [id])
}

model Tender {
  id                               String           @id
  title                            String
  tenderNumber                     String           @unique
  description                      String?
  clientId                         String
  estimatedValue                   Decimal?         @db.Decimal(15, 2)
  submissionDeadline               DateTime
  openDate                         DateTime         @default(now())
  closeDate                        DateTime?
  status                           TenderStatus     @default(OPEN)
  priority                         Priority         @default(MEDIUM)
  requirements                     String?
  contactPerson                    String?
  contactEmail                     String?
  contactPhone                     String?
  location                         String?
  category                         TenderCategory   @default(GENERAL)
  nasDocumentPath                  String?
  isActive                         Boolean          @default(true)
  createdById                      String
  assignedToId                     String?
  salespersonId                    String?
  createdAt                        DateTime         @default(now())
  updatedAt                        DateTime
  Document                         Document[]
  Quotation                        Quotation[]
  User_Tender_assignedToIdToUser   User?            @relation("Tender_assignedToIdToUser", fields: [assignedToId], references: [id])
  User_Tender_salespersonIdToUser  User?            @relation("Tender_salespersonIdToUser", fields: [salespersonId], references: [id])
  Client                           Client           @relation(fields: [clientId], references: [id])
  User_Tender_createdByIdToUser    User             @relation("Tender_createdByIdToUser", fields: [createdById], references: [id])
  TenderActivity                   TenderActivity[]
}

model TenderActivity {
  id          String   @id
  tenderId    String
  action      String
  description String?
  oldValue    String?
  newValue    String?
  userId      String
  userEmail   String
  createdAt   DateTime @default(now())
  Tender      Tender   @relation(fields: [tenderId], references: [id])
}

model User {
  id                                                    String                 @id
  name                                                  String?
  email                                                 String                 @unique
  emailVerified                                         DateTime?
  image                                                 String?
  password                                              String?
  firstName                                             String?
  lastName                                              String?
  role                                                  UserRole               @default(PROJECT_MANAGER)
  companyName                                           String?
  vendorId                                              String?
  isActive                                              Boolean                @default(true)
  createdAt                                             DateTime               @default(now())
  updatedAt                                             DateTime
  lastLoginAt                                           DateTime?
  Account                                               Account[]
  AuditLog                                              AuditLog[]
  Client                                                Client[]
  ClientInvoice                                         ClientInvoice[]
  Document                                              Document[]
  LegacyInvoice                                         LegacyInvoice[]
  Payment_Payment_createdByIdToUser                     Payment[]              @relation("Payment_createdByIdToUser")
  Payment_Payment_processedByIdToUser                   Payment[]              @relation("Payment_processedByIdToUser")
  Project_Project_createdByIdToUser                     Project[]              @relation("Project_createdByIdToUser")
  Project_Project_managerIdToUser                       Project[]              @relation("Project_managerIdToUser")
  Project_Project_salespersonIdToUser                   Project[]              @relation("Project_salespersonIdToUser")
  PurchaseOrder_PurchaseOrder_approvedByIdToUser        PurchaseOrder[]        @relation("PurchaseOrder_approvedByIdToUser")
  PurchaseOrder_PurchaseOrder_createdByIdToUser         PurchaseOrder[]        @relation("PurchaseOrder_createdByIdToUser")
  PurchaseOrder_PurchaseOrder_requesterIdToUser         PurchaseOrder[]        @relation("PurchaseOrder_requesterIdToUser")
  Quotation_Quotation_approvedByIdToUser                Quotation[]            @relation("Quotation_approvedByIdToUser")
  Quotation_Quotation_createdByIdToUser                 Quotation[]            @relation("Quotation_createdByIdToUser")
  Quotation_Quotation_rejectedByIdToUser                Quotation[]            @relation("Quotation_rejectedByIdToUser")
  Quotation_Quotation_salespersonIdToUser               Quotation[]            @relation("Quotation_salespersonIdToUser")
  QuotationApproval                                     QuotationApproval[]
  QuotationItemLibrary                                  QuotationItemLibrary[]
  QuotationTemplate                                     QuotationTemplate[]
  Session                                               Session[]
  Task_Task_assigneeIdToUser                            Task[]                 @relation("Task_assigneeIdToUser")
  Task_Task_assignerIdToUser                            Task[]                 @relation("Task_assignerIdToUser")
  TaskAttachment                                        TaskAttachment[]
  TaskComment                                           TaskComment[]
  TaskNotification                                      TaskNotification[]
  Tender_Tender_assignedToIdToUser                      Tender[]               @relation("Tender_assignedToIdToUser")
  Tender_Tender_createdByIdToUser                       Tender[]               @relation("Tender_createdByIdToUser")
  Tender_Tender_salespersonIdToUser                     Tender[]               @relation("Tender_salespersonIdToUser")
  Vendor_User_vendorIdToVendor                          Vendor?                @relation("User_vendorIdToVendor", fields: [vendorId], references: [id])
  Vendor_Vendor_createdByIdToUser                       Vendor[]               @relation("Vendor_createdByIdToUser")
  VendorInvoice_VendorInvoice_createdByIdToUser         VendorInvoice[]        @relation("VendorInvoice_createdByIdToUser")
  VendorInvoice_VendorInvoice_financeApprovedByIdToUser VendorInvoice[]        @relation("VendorInvoice_financeApprovedByIdToUser")
  VendorInvoice_VendorInvoice_projectApprovedByIdToUser VendorInvoice[]        @relation("VendorInvoice_projectApprovedByIdToUser")
  ServiceContract                                       ServiceContract[]      @relation("ServiceContractCreator")
  AssignedServiceJobs                                   ServiceJob[]           @relation("AssignedServiceJobsUser")
  XeroIntegration                                       XeroIntegration[]
  
  // Project Document Management System Relations
  CreatedProjectDocuments                               ProjectDocument[]      @relation("ProjectDocumentCreator")
  ApprovedProjectDocuments                              ProjectDocument[]      @relation("ProjectDocumentApprover")
  SubmittedProjectDocuments                             ProjectDocument[]      @relation("ProjectDocumentSubmitter")
  ProjectDocumentTemplates                              ProjectDocumentTemplate[]
  ProjectDocumentNotifications                          ProjectDocumentNotification[]
}

model Vendor {
  id                            String           @id
  name                          String
  email                         String?
  phone                         String?
  address                       String?
  city                          String?
  state                         String?
  country                       String           @default("Singapore")
  postalCode                    String?
  contactPerson                 String?
  companyReg                    String?
  website                       String?
  notes                         String?
  vendorType                    VendorType       @default(SUPPLIER)
  paymentTerms                  PaymentTerms     @default(NET_30)
  contractDetails               String?
  bankName                      String?
  bankAccountNumber             String?
  bankAccountName               String?
  bankSwiftCode                 String?
  bankAddress                   String?
  isActive                      Boolean          @default(true)
  isApproved                    Boolean          @default(false)
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime
  createdById                   String
  vendorNumber                  String?          @unique
  xeroContactId                 String?          @unique
  isXeroSynced                  Boolean          @default(false)
  lastXeroSync                  DateTime?
  Document                      Document[]
  ProjectVendor                 ProjectVendor[]
  PurchaseOrder                 PurchaseOrder[]
  User_User_vendorIdToVendor    User[]           @relation("User_vendorIdToVendor")
  User_Vendor_createdByIdToUser User             @relation("Vendor_createdByIdToUser", fields: [createdById], references: [id])
  VendorContract                VendorContract[]
  VendorInvoice                 VendorInvoice[]
  AssignedServiceJobs           ServiceJob[]     @relation("AssignedServiceJobsVendor")
  VendorReports                 VendorReport[]   @relation("VendorReports")
}

model VendorContract {
  id             String         @id
  title          String
  contractNumber String         @unique
  description    String?
  vendorId       String
  projectId      String?
  contractValue  Decimal        @db.Decimal(15, 2)
  startDate      DateTime
  endDate        DateTime
  status         ContractStatus @default(DRAFT)
  paymentTerms   PaymentTerms   @default(NET_30)
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  Project        Project?       @relation(fields: [projectId], references: [id])
  Vendor         Vendor         @relation(fields: [vendorId], references: [id])
}

model VendorInvoice {
  id                                           String                  @id
  invoiceNumber                                String
  vendorInvoiceRef                             String?
  vendorId                                     String
  projectId                                    String?
  purchaseOrderId                              String?
  subtotal                                     Decimal                 @db.Decimal(15, 2)
  taxAmount                                    Decimal?                @db.Decimal(15, 2)
  totalAmount                                  Decimal                 @db.Decimal(15, 2)
  currency                                     String                  @default("SGD")
  status                                       VendorInvoiceStatus     @default(DRAFT)
  invoiceDate                                  DateTime
  dueDate                                      DateTime
  receivedDate                                 DateTime?
  approvedDate                                 DateTime?
  paidDate                                     DateTime?
  description                                  String?
  notes                                        String?
  documentPath                                 String?
  xeroInvoiceId                                String?
  isXeroSynced                                 Boolean                 @default(false)
  lastXeroSync                                 DateTime?
  projectApprovalRequired                      Boolean                 @default(true)
  projectApprovedById                          String?
  projectApprovedAt                            DateTime?
  financeApprovedById                          String?
  financeApprovedAt                            DateTime?
  createdById                                  String
  createdAt                                    DateTime                @default(now())
  updatedAt                                    DateTime
  Document                                     Document[]
  Payment                                      Payment[]
  User_VendorInvoice_createdByIdToUser         User                    @relation("VendorInvoice_createdByIdToUser", fields: [createdById], references: [id])
  User_VendorInvoice_financeApprovedByIdToUser User?                   @relation("VendorInvoice_financeApprovedByIdToUser", fields: [financeApprovedById], references: [id])
  User_VendorInvoice_projectApprovedByIdToUser User?                   @relation("VendorInvoice_projectApprovedByIdToUser", fields: [projectApprovedById], references: [id])
  Project                                      Project?                @relation(fields: [projectId], references: [id])
  PurchaseOrder                                PurchaseOrder?          @relation(fields: [purchaseOrderId], references: [id])
  Vendor                                       Vendor                  @relation(fields: [vendorId], references: [id])
  VendorInvoiceActivity                        VendorInvoiceActivity[]
  VendorInvoiceItem                            VendorInvoiceItem[]

  @@unique([vendorId, invoiceNumber])
}

model VendorInvoiceActivity {
  id              String        @id
  vendorInvoiceId String
  action          String
  description     String?
  oldValue        String?
  newValue        String?
  userId          String
  userEmail       String
  createdAt       DateTime      @default(now())
  VendorInvoice   VendorInvoice @relation(fields: [vendorInvoiceId], references: [id], onDelete: Cascade)
}

model VendorInvoiceItem {
  id              String        @id
  vendorInvoiceId String
  description     String
  category        ItemCategory  @default(SERVICES)
  quantity        Decimal       @db.Decimal(10, 2)
  unitPrice       Decimal       @db.Decimal(15, 2)
  discount        Decimal?      @db.Decimal(5, 2)
  taxRate         Decimal?      @db.Decimal(5, 2)
  subtotal        Decimal       @db.Decimal(15, 2)
  discountAmount  Decimal?      @db.Decimal(15, 2)
  taxAmount       Decimal?      @db.Decimal(15, 2)
  totalPrice      Decimal       @db.Decimal(15, 2)
  unit            String?       @default("pcs")
  notes           String?
  order           Int           @default(0)
  VendorInvoice   VendorInvoice @relation(fields: [vendorInvoiceId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model XeroIntegration {
  id             String    @id
  tenantId       String    @unique
  tenantName     String?
  accessToken    String
  refreshToken   String
  expiresAt      DateTime
  scopes         String[]
  isActive       Boolean   @default(true)
  connectedAt    DateTime  @default(now())
  lastSyncAt     DateTime?
  createdById    String
  User           User      @relation(fields: [createdById], references: [id])
}

model XeroSyncLog {
  id           String   @id
  entity       String
  entityId     String
  syncType     String
  status       String
  xeroId       String?
  errorMessage String?
  requestData  Json?
  responseData Json?
  createdAt    DateTime @default(now())
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ClientInvoiceStatus {
  DRAFT
  APPROVED
  SENT
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
}

enum ClientType {
  ENTERPRISE
  SME
  GOVERNMENT
  INDIVIDUAL
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  RENEWED
  TERMINATED
}

enum DocumentCategory {
  CONTRACT
  PROPOSAL
  REPORT
  DRAWING
  SPECIFICATION
  CERTIFICATE
  INVOICE
  GENERAL
}

enum EntityType {
  CLIENT
  PROJECT
  INVOICE
  DOCUMENT
  USER
  VENDOR
  VENDOR_INVOICE
  VENDOR_CONTRACT
  TENDER
  QUOTATION
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ItemCategory {
  MATERIALS
  SERVICES
  SUBCONTRACTORS
  MISCELLANEOUS
  SUBTITLE
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  TASK_COMPLETED
  TASK_COMMENTED
  TASK_STATUS_CHANGED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHEQUE
  CREDIT_CARD
  PAYPAL
  CRYPTO
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentTerms {
  NET_15
  NET_30
  NET_60
  NET_90
  IMMEDIATE
  CUSTOM
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectType {
  REGULAR
  MAINTENANCE
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ISSUED
  ACKNOWLEDGED
  DELIVERED
  COMPLETED
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  SENT
  ACCEPTED
  EXPIRED
  CONVERTED
  SUPERSEDED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum TenderCategory {
  CONSTRUCTION
  ENGINEERING
  SUPPLY
  CONSULTING
  MAINTENANCE
  INSTALLATION
  GENERAL
}

enum TenderStatus {
  OPEN
  SUBMITTED
  AWARDED
  WON
  LOST
  CANCELLED
  EXPIRED
}

enum UserRole {
  SUPERADMIN
  PROJECT_MANAGER
  FINANCE
  VENDOR
  SALES
}

enum VendorInvoiceStatus {
  DRAFT
  RECEIVED
  PENDING_PROJECT_APPROVAL
  PROJECT_APPROVED
  PENDING_FINANCE_APPROVAL
  FINANCE_APPROVED
  APPROVED
  PAID
  REJECTED
  DISPUTED
}

enum VendorProjectStatus {
  ASSIGNED
  ACTIVE
  COMPLETED
  SUSPENDED
  TERMINATED
}

enum VendorType {
  SUPPLIER
  CONTRACTOR
  CONSULTANT
  SERVICE_PROVIDER
}

enum ServiceType {
  Electrical
  Mechanical
  Plumbing
  Sanitary
  Other
}

enum ServiceFrequency {
  Monthly
  Quarterly
  BiAnnual
  Annual
  Custom
}

enum JobAssigneeType {
  Staff
  Vendor
}

enum ServiceJobStatus {
  Scheduled
  InProgress
  Completed
  Endorsed
  Overdue
}

enum ServiceInvoiceType {
  Client
  Vendor
}

enum ServiceInvoiceStatus {
  Draft
  PendingApproval
  Approved
  Rejected
  Paid
}

enum ProjectDocumentType {
  // Pre-Construction Stage
  PRE_CONSTRUCTION_SURVEY
  SITE_SAFETY_PLAN
  RISK_ASSESSMENT
  WORK_METHOD_STATEMENT
  PERMIT_TO_WORK
  HOT_WORK_PERMIT
  LIFTING_PERMIT
  CONFINED_SPACE_PERMIT
  WORKER_LIST
  
  // Construction Stage
  DAILY_SITE_REPORT
  INSPECTION_TEST_PLAN
  QUALITY_CHECKLIST
  MATERIAL_DELIVERY_NOTE
  PROGRESS_PHOTOS
  VARIATION_ORDER
  INCIDENT_REPORT
  ACCIDENT_REPORT
  TOOLBOX_MEETING
  
  // Handover & Completion Stage
  OPERATION_MAINTENANCE_MANUAL
  TESTING_COMMISSIONING_REPORT
  AS_BUILT_DRAWINGS
  HANDOVER_FORM
  DEFECT_LIABILITY_REPORT
  NON_CONFORMANCE_REPORT
  
  // Post-Completion Stage
  FINAL_COMPLETION_CERTIFICATE
  WARRANTY_CERTIFICATE
  SERVICE_AGREEMENT
  
  // General
  GENERAL
}

enum ProjectDocumentStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
}

enum ProjectDocumentCategory {
  PRE_CONSTRUCTION
  CONSTRUCTION
  HANDOVER_COMPLETION
  POST_COMPLETION
}

enum TemplateType {
  // Pre-Construction Stage
  PRE_CONSTRUCTION_SURVEY
  SITE_SAFETY_PLAN
  RISK_ASSESSMENT
  WORK_METHOD_STATEMENT
  PERMIT_TO_WORK
  HOT_WORK_PERMIT
  LIFTING_PERMIT
  CONFINED_SPACE_PERMIT
  WORKER_LIST
  
  // Construction Stage
  DAILY_SITE_REPORT
  INSPECTION_TEST_PLAN
  QUALITY_CHECKLIST
  MATERIAL_DELIVERY_NOTE
  PROGRESS_PHOTOS
  VARIATION_ORDER
  INCIDENT_REPORT
  ACCIDENT_REPORT
  TOOLBOX_MEETING
  
  // Handover & Completion Stage
  OPERATION_MAINTENANCE_MANUAL
  TESTING_COMMISSIONING_REPORT
  AS_BUILT_DRAWINGS
  HANDOVER_FORM
  DEFECT_LIABILITY_REPORT
  NON_CONFORMANCE_REPORT
  
  // Post-Completion Stage
  FINAL_COMPLETION_CERTIFICATE
  WARRANTY_CERTIFICATE
  SERVICE_AGREEMENT
  
  // Legacy template types (keeping for compatibility)
  INSPECTION_CHECKLIST
}

enum DocumentNotificationType {
  DOCUMENT_ASSIGNED
  DOCUMENT_DUE_SOON
  DOCUMENT_OVERDUE
  DOCUMENT_SUBMITTED
  DOCUMENT_APPROVED
  DOCUMENT_REJECTED
  DOCUMENT_UPDATED
  APPROVAL_REQUIRED
}

// Servicing & Maintenance Tracking Models

model ServiceContract {
  id           String           @id @default(cuid())
  contractNo   String           @unique
  clientId     String
  projectId    String?
  serviceType  ServiceType
  frequency    ServiceFrequency
  startDate    DateTime
  endDate      DateTime
  filePath     String?
  createdById  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // Relations
  client       Client           @relation(fields: [clientId], references: [id])
  project      Project?         @relation(fields: [projectId], references: [id])
  createdBy    User             @relation("ServiceContractCreator", fields: [createdById], references: [id])
  jobs         ServiceJob[]
}

model ServiceJob {
  id              String              @id @default(cuid())
  contractId      String
  clientId        String
  projectId       String?
  assignedToType  JobAssigneeType
  assignedToId    String
  scheduledDate   DateTime
  status          ServiceJobStatus    @default(Scheduled)
  completionNotes String?
  completedAt     DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  contract        ServiceContract     @relation(fields: [contractId], references: [id])
  client          Client              @relation(fields: [clientId], references: [id])
  project         Project?            @relation(fields: [projectId], references: [id])
  assignedUser    User?               @relation("AssignedServiceJobsUser", fields: [assignedToId], references: [id], map: "ServiceJob_assignedUser_fkey")
  assignedVendor  Vendor?             @relation("AssignedServiceJobsVendor", fields: [assignedToId], references: [id], map: "ServiceJob_assignedVendor_fkey")
  
  jobSheets       ServiceJobSheet[]
  vendorReports   VendorReport[]
  invoices        ServiceInvoice[]
}

model ServiceJobSheet {
  id             String        @id @default(cuid())
  jobId          String
  filePath       String
  clientSignature String?
  generatedAt    DateTime      @default(now())
  
  // Relations
  job            ServiceJob    @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model VendorReport {
  id         String     @id @default(cuid())
  jobId      String
  vendorId   String
  filePath   String
  uploadedAt DateTime   @default(now())
  
  // Relations
  job        ServiceJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  vendor     Vendor     @relation("VendorReports", fields: [vendorId], references: [id])
}

model ServiceInvoice {
  id          String               @id @default(cuid())
  jobId       String
  invoiceNo   String               @unique
  invoiceType ServiceInvoiceType
  amount      Decimal              @db.Decimal(12,2)
  status      ServiceInvoiceStatus @default(Draft)
  xeroId      String?
  filePath    String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  // Relations
  job         ServiceJob           @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

// Project Document Management System Models

model ProjectDocument {
  id                String                  @id @default(cuid())
  projectId         String
  documentNumber    String                  @unique // Structured document number (e.g., PRJ-2025-001/WMS/001)
  documentType      ProjectDocumentType
  title             String
  description       String?
  status            ProjectDocumentStatus   @default(DRAFT)
  category          ProjectDocumentCategory
  version           Int                     @default(1)
  cloudStoragePath  String?                 // S3 key for uploaded/generated file
  filename          String?
  originalName      String?
  mimetype          String?
  size              Int?
  templateType      TemplateType?
  templateData      Json?                   // Store form data for templates
  
  // Photo analysis support
  photoDescriptions Json?                   // Store photo analysis results
  photoCount        Int                     @default(0)
  hasPhotos         Boolean                 @default(false)
  
  // Approval workflow
  requiresApproval  Boolean                 @default(false)
  submittedAt       DateTime?
  approvedAt        DateTime?
  rejectedAt        DateTime?
  rejectionReason   String?
  
  // Tracking
  createdById       String
  approvedById      String?
  submittedById     String?
  
  // Audit trail
  isActive          Boolean                 @default(true)
  isLatestVersion   Boolean                 @default(true)
  parentDocumentId  String?                 // For version control
  
  // Timestamps
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relations
  project           Project                 @relation(fields: [projectId], references: [id])
  createdBy         User                    @relation("ProjectDocumentCreator", fields: [createdById], references: [id])
  approvedBy        User?                   @relation("ProjectDocumentApprover", fields: [approvedById], references: [id])
  submittedBy       User?                   @relation("ProjectDocumentSubmitter", fields: [submittedById], references: [id])
  parentDocument    ProjectDocument?        @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  versions          ProjectDocument[]       @relation("DocumentVersions")
  
  notifications     ProjectDocumentNotification[]
  activities        ProjectDocumentActivity[]
  
  @@unique([projectId, documentType, version])
  @@index([projectId, category])
  @@index([projectId, status])
  @@index([createdAt])
}

model ProjectDocumentTemplate {
  id              String        @id @default(cuid())
  name            String
  templateType    TemplateType
  category        ProjectDocumentCategory
  description     String?
  templateContent Json          // Store template structure/fields
  isActive        Boolean       @default(true)
  isDefault       Boolean       @default(false)
  
  // Metadata
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  createdBy       User          @relation(fields: [createdById], references: [id])
  
  @@unique([templateType, isDefault])
}

model ProjectDocumentNotification {
  id            String           @id @default(cuid())
  documentId    String
  userId        String
  type          DocumentNotificationType
  message       String
  isRead        Boolean          @default(false)
  sentAt        DateTime?
  createdAt     DateTime         @default(now())
  
  // Relations
  document      ProjectDocument  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id])
}

model ProjectDocumentActivity {
  id          String          @id @default(cuid())
  documentId  String
  action      String
  description String?
  oldValue    String?
  newValue    String?
  userId      String
  userEmail   String
  createdAt   DateTime        @default(now())
  
  // Relations
  document    ProjectDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}
